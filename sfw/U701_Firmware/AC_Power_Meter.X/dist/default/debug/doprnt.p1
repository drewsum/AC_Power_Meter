Version 3.2 HI-TECH Software Intermediate Code
"388 C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c
[v __npowers_ `Cd ~T0 @X0 -> 0 `x e ]
[v __powers_ `Cd ~T0 @X0 -> 0 `x e ]
[v F10 `(v ~T0 @X0 0 tf1`uc ]
"43 C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdio.h
[s S1 `*uc 1 `*F10 1 ]
[n S1 __prbuf ptr func ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.45\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
"394 C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c
[v __tdiv_to_l_ `(ul ~T0 @X0 0 ef2`f`f ]
"392
[v __div_to_l_ `(ul ~T0 @X0 0 ef2`d`d ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 53: extern double atof(const char *);
[; ;stdlib.h: 54: extern double strtod(const char *, const char **);
[; ;stdlib.h: 55: extern int atoi(const char *);
[; ;stdlib.h: 56: extern unsigned xtoi(const char *);
[; ;stdlib.h: 57: extern long atol(const char *);
[; ;stdlib.h: 58: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 60: extern int rand(void);
[; ;stdlib.h: 61: extern void srand(unsigned int);
[; ;stdlib.h: 62: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 63: extern div_t div(int numer, int denom);
[; ;stdlib.h: 64: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 65: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 66: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 67: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 68: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 69: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 70: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 75: extern void * malloc(size_t);
[; ;stdlib.h: 76: extern void free(void *);
[; ;stdlib.h: 77: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 86: extern int atexit(void (*)(void));
[; ;stdlib.h: 87: extern char * getenv(const char *);
[; ;stdlib.h: 88: extern char ** environ;
[; ;stdlib.h: 89: extern int system(char *);
[; ;stdlib.h: 90: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 91: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 92: extern int abs(int);
[; ;stdlib.h: 93: extern long labs(long);
[; ;stdlib.h: 95: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 96: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 101: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 102: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 104: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;sys.h: 22: extern int execl(char *, char *, ...);
[; ;sys.h: 23: extern int execv(char *, char **);
[; ;sys.h: 24: extern int execve(char *, char **, char **);
[; ;sys.h: 25: extern int execle(char *, char *, ...);
[; ;sys.h: 26: extern int execvp(char *, char **);
[; ;sys.h: 27: extern int execlp(char *, char *, ...);
[; ;sys.h: 28: extern int getpid(void);
[; ;sys.h: 29: extern char * mktemp(char *);
[; ;sys.h: 43: extern int spawnl(char *, char *, ...);
[; ;sys.h: 44: extern int spawnv(char *, char **);
[; ;sys.h: 45: extern int spawnle(char *, char *, ...);
[; ;sys.h: 46: extern int spawnve(char *, char **, char **);
[; ;sys.h: 47: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 48: extern int spawnvp(char *, char **);
[; ;sys.h: 50: extern int chdir(char *);
[; ;sys.h: 51: extern int chdrv(char *);
[; ;sys.h: 52: extern int mkdir(char *);
[; ;sys.h: 53: extern int rmdir(char *);
[; ;sys.h: 54: extern char * getcwd(char *);
[; ;sys.h: 55: extern void persist_validate(void);
[; ;sys.h: 56: extern int persist_check(int);
[; ;sys.h: 57: extern char * getdrv(void);
[; ;sys.h: 58: extern char ** _getargs(char *, char *);
[; ;sys.h: 59: extern int _argc_;
[; ;sys.h: 70: extern void * sbrk(size_t);
[; ;sys.h: 71: extern void brk(void *);
[; ;sys.h: 77: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 78: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"13 C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c
[p n 350 ]
"354
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"356
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"359
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 354: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 356: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 357: 1000000000
[; ;doprnt.c: 359: };
"362
[v _hexpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 16 `i `l `ul
-> -> -> 256 `i `l `ul
-> -> -> 4096 `i `l `ul
"364
-> -> 65536 `l `ul
-> -> 1048576 `l `ul
-> -> 16777216 `l `ul
"366
-> -> 268435456 `l `ul
..
]
[; ;doprnt.c: 362: const static unsigned long hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 364: 0x10000, 0x100000, 0x1000000, 0x10000000
[; ;doprnt.c: 366: };
[; ;doprnt.c: 388: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 392: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 394: extern unsigned long _tdiv_to_l_(float, float);
"409
[v _fround `(d ~T0 @X0 1 sf1`uc ]
"410
{
[; ;doprnt.c: 408: static double
[; ;doprnt.c: 409: fround(unsigned char prec)
[; ;doprnt.c: 410: {
[e :U _fround ]
"409
[v _prec `uc ~T0 @X0 1 r1 ]
"410
[f ]
[; ;doprnt.c: 413: if(prec>=110)
"413
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npowers_[prec%10];
"414
[e ) * * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _prec `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"415
[e :U 7 ]
[; ;doprnt.c: 415: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
"416
[e ) * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"417
[e :U 8 ]
[; ;doprnt.c: 417: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 418: }
"418
[e :UE 6 ]
}
"425
[v _scale `(d ~T0 @X0 1 sf1`c ]
"426
{
[; ;doprnt.c: 424: static double
[; ;doprnt.c: 425: scale(signed char scl)
[; ;doprnt.c: 426: {
[e :U _scale ]
"425
[v _scl `c ~T0 @X0 1 r1 ]
"426
[f ]
[; ;doprnt.c: 428: if(scl < 0) {
"428
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 429: scl = -scl;
"429
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 430: if(scl>=110)
"430
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl%10];
"431
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"432
[e :U 12 ]
[; ;doprnt.c: 432: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
"433
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"434
[e :U 13 ]
[; ;doprnt.c: 434: return _npowers_[scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"435
}
[e :U 11 ]
[; ;doprnt.c: 435: }
[; ;doprnt.c: 436: if(scl>=110)
"436
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10];
"437
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"438
[e :U 15 ]
[; ;doprnt.c: 438: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
"439
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"440
[e :U 16 ]
[; ;doprnt.c: 440: return _powers_[scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 441: }
"441
[e :UE 10 ]
}
"458
[v __doprnt `(i ~T0 @X0 1 ef3`*S1`*Cuc`**v ]
"459
{
[; ;doprnt.c: 455: int
[; ;doprnt.c: 458: _doprnt(struct __prbuf * pb, register const char * f, register va_list ap)
[; ;doprnt.c: 459: {
[e :U __doprnt ]
"458
[v _pb `*S1 ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 R2 ]
[v _ap `**v ~T0 @X0 1 R3 ]
"459
[f ]
"499
[v _c `c ~T0 @X0 1 a ]
"501
[v _width `i ~T0 @X0 1 a ]
"504
[v _prec `i ~T0 @X0 1 a ]
"508
[v _flag `us ~T0 @X0 1 a ]
"515
[v _d `uc ~T0 @X0 1 a ]
"516
[v _fval `d ~T0 @X0 1 a ]
[v _exp `i ~T0 @X0 1 a ]
"523
[u S18 `ul 1 `d 1 ]
[n S18 . vd integ ]
"526
[v _tmpval `S18 ~T0 @X0 1 a ]
"528
[v _val `ul ~T0 @X0 1 a ]
"529
[v _len `ui ~T0 @X0 1 a ]
"530
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 499: signed char c;
[; ;doprnt.c: 501: int width;
[; ;doprnt.c: 504: int prec;
[; ;doprnt.c: 508: unsigned short flag;
[; ;doprnt.c: 515: char d;
[; ;doprnt.c: 516: double fval;
[; ;doprnt.c: 517: int exp;
[; ;doprnt.c: 523: union {
[; ;doprnt.c: 524: unsigned long vd;
[; ;doprnt.c: 525: double integ;
[; ;doprnt.c: 526: } tmpval;
[; ;doprnt.c: 528: unsigned long val;
[; ;doprnt.c: 529: unsigned len;
[; ;doprnt.c: 530: const char * cp;
[; ;doprnt.c: 536: while(c = *f++) {
"536
[e $U 20  ]
[e :U 21 ]
{
[; ;doprnt.c: 538: if(c != '%')
"538
[e $ ! != -> -> _c `i `ui -> 37 `ui 23  ]
[; ;doprnt.c: 540: {
"540
{
[; ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"541
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 24  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 25  ]
[e :U 24 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 25 ]
[; ;doprnt.c: 542: continue;
"542
[e $U 20  ]
"543
}
[e :U 23 ]
[; ;doprnt.c: 543: }
[; ;doprnt.c: 546: width = 0;
"546
[e = _width -> 0 `i ]
[; ;doprnt.c: 548: flag = 0;
"548
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 550: for(;;) {
"550
{
[e :U 26 ]
{
[; ;doprnt.c: 551: switch(*f) {
"551
[e $U 30  ]
{
[; ;doprnt.c: 579: case '0':
"579
[e :U 31 ]
[; ;doprnt.c: 580: flag |= 0x04;
"580
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 581: f++;
"581
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 582: continue;
"582
[e $U 28  ]
"584
}
[; ;doprnt.c: 584: }
[e $U 29  ]
"551
[e :U 30 ]
[e [\ *U _f , $ -> -> 48 `ui `uc 31
 29 ]
"584
[e :U 29 ]
[; ;doprnt.c: 585: break;
"585
[e $U 27  ]
"586
}
[e :U 28 ]
[; ;doprnt.c: 586: }
[e $U 26  ]
[e :U 27 ]
}
[; ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
"597
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 32  ]
{
[; ;doprnt.c: 598: width = 0;
"598
[e = _width -> 0 `i ]
[; ;doprnt.c: 599: do {
"599
[e :U 35 ]
{
[; ;doprnt.c: 600: width *= 10;
"600
[e =* _width -> 10 `i ]
[; ;doprnt.c: 601: width += *f++ - '0';
"601
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"602
}
[; ;doprnt.c: 602: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 35  ]
[e :U 34 ]
"608
}
[e :U 32 ]
[; ;doprnt.c: 608: }
[; ;doprnt.c: 611: if(*f == '.') {
"611
[e $ ! == -> *U _f `ui -> 46 `ui 36  ]
{
[; ;doprnt.c: 612: flag |= 0x4000;
"612
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 613: f++;
"613
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 620: {
"620
{
[; ;doprnt.c: 621: prec = 0;
"621
[e = _prec -> 0 `i ]
[; ;doprnt.c: 622: while(isdigit((unsigned)*f))
"622
[e $U 37  ]
[e :U 38 ]
[; ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
"623
[e = _prec -> - -> + * _prec -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `i ]
[e :U 37 ]
"622
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 38  ]
[e :U 39 ]
"624
}
"625
}
[; ;doprnt.c: 624: }
[; ;doprnt.c: 625: } else {
[e $U 40  ]
[e :U 36 ]
{
[; ;doprnt.c: 626: prec = 0;
"626
[e = _prec -> 0 `i ]
[; ;doprnt.c: 628: flag |= 0x1000;
"628
[e =| _flag -> -> 4096 `i `us ]
"630
}
[e :U 40 ]
[; ;doprnt.c: 630: }
[; ;doprnt.c: 633: loop:
"633
[e :U 41 ]
[; ;doprnt.c: 635: switch(c = *f++) {
"635
[e $U 43  ]
{
[; ;doprnt.c: 637: case 0:
"637
[e :U 44 ]
[; ;doprnt.c: 638: goto alldone;
"638
[e $U 45  ]
[; ;doprnt.c: 641: case 'l':
"641
[e :U 46 ]
[; ;doprnt.c: 643: flag |= 0x10;
"643
[e =| _flag -> -> 16 `i `us ]
[; ;doprnt.c: 644: goto loop;
"644
[e $U 41  ]
[; ;doprnt.c: 662: case 'f':
"662
[e :U 47 ]
[; ;doprnt.c: 663: flag |= 0x400;
"663
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 664: break;
"664
[e $U 42  ]
[; ;doprnt.c: 672: case 'e':
"672
[e :U 48 ]
[; ;doprnt.c: 673: flag |= 0x100;
"673
[e =| _flag -> -> 256 `i `us ]
[; ;doprnt.c: 674: break;
"674
[e $U 42  ]
[; ;doprnt.c: 697: case 'd':
"697
[e :U 49 ]
"698
[e :U 50 ]
[; ;doprnt.c: 698: case 'i':
[; ;doprnt.c: 699: break;
"699
[e $U 42  ]
[; ;doprnt.c: 712: case 'X':
"712
[e :U 51 ]
"718
[e :U 52 ]
[; ;doprnt.c: 718: case 'x':
[; ;doprnt.c: 721: flag |= 0x80;
"721
[e =| _flag -> -> 128 `i `us ]
[; ;doprnt.c: 723: break;
"723
[e $U 42  ]
[; ;doprnt.c: 728: case 's':
"728
[e :U 53 ]
[; ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0));
"734
[e = _cp *U -> ( ___va_arg , (. -> *U -> _ap `***Cuc `*v -> -> 0 `i `*Cuc `**Cuc ]
[; ;doprnt.c: 740: if(!cp)
"740
[e $ ! ! != _cp -> -> 0 `i `*Cuc 54  ]
[; ;doprnt.c: 741: cp = "(null)";
"741
[e = _cp :s 1C ]
[e :U 54 ]
[; ;doprnt.c: 745: len = 0;
"745
[e = _len -> -> 0 `i `ui ]
[; ;doprnt.c: 746: while(cp[len])
"746
[e $U 55  ]
[e :U 56 ]
[; ;doprnt.c: 747: len++;
"747
[e ++ _len -> -> 1 `i `ui ]
[e :U 55 ]
"746
[e $ != -> *U + _cp * -> _len `ux -> -> # *U _cp `ui `ux `i -> -> -> 0 `i `Cuc `i 56  ]
[e :U 57 ]
[; ;doprnt.c: 750: dostring:
"750
[e :U 58 ]
[; ;doprnt.c: 753: if(prec && prec < len)
"753
[e $ ! && != _prec -> 0 `i < -> _prec `ui _len 59  ]
[; ;doprnt.c: 754: len = prec;
"754
[e = _len -> _prec `ui ]
[e :U 59 ]
[; ;doprnt.c: 757: if(width > len)
"757
[e $ ! > -> _width `ui _len 60  ]
[; ;doprnt.c: 758: width -= len;
"758
[e =- _width -> _len `i ]
[e $U 61  ]
"759
[e :U 60 ]
[; ;doprnt.c: 759: else
[; ;doprnt.c: 760: width = 0;
"760
[e = _width -> 0 `i ]
[e :U 61 ]
[; ;doprnt.c: 764: while(width--)
"764
[e $U 62  ]
[e :U 63 ]
[; ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"765
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 65  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 66  ]
[e :U 65 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 66 ]
[e :U 62 ]
"764
[e $ != -- _width -> 1 `i -> 0 `i 63  ]
[e :U 64 ]
[; ;doprnt.c: 767: while(len--)
"767
[e $U 67  ]
[e :U 68 ]
[; ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
"768
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 70  ]
[e ( *U . *U _pb 1 (1 *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e $U 71  ]
[e :U 70 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e :U 71 ]
[e :U 67 ]
"767
[e $ != -- _len -> -> 1 `i `ui -> -> 0 `i `ui 68  ]
[e :U 69 ]
[; ;doprnt.c: 774: continue;
"774
[e $U 20  ]
[; ;doprnt.c: 784: case 'c':
"784
[e :U 72 ]
[; ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
"799
[e = _c -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `c ]
[; ;doprnt.c: 802: default:
"802
[e :U 73 ]
[; ;doprnt.c: 805: cp = (char *)&c;
"805
[e = _cp -> -> &U _c `*uc `*Cuc ]
[; ;doprnt.c: 806: len = 1;
"806
[e = _len -> -> 1 `i `ui ]
[; ;doprnt.c: 807: goto dostring;
"807
[e $U 58  ]
[; ;doprnt.c: 817: case 'u':
"817
[e :U 74 ]
[; ;doprnt.c: 818: flag |= 0xC0;
"818
[e =| _flag -> -> 192 `i `us ]
[; ;doprnt.c: 819: break;
"819
[e $U 42  ]
"822
}
[; ;doprnt.c: 822: }
[e $U 42  ]
"635
[e :U 43 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 44
 , $ -> -> 108 `ui `c 46
 , $ -> -> 102 `ui `c 47
 , $ -> -> 101 `ui `c 48
 , $ -> -> 100 `ui `c 49
 , $ -> -> 105 `ui `c 50
 , $ -> -> 88 `ui `c 51
 , $ -> -> 120 `ui `c 52
 , $ -> -> 115 `ui `c 53
 , $ -> -> 99 `ui `c 72
 , $ -> -> 117 `ui `c 74
 73 ]
"822
[e :U 42 ]
[; ;doprnt.c: 825: if(flag & (0x700)) {
"825
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 75  ]
{
[; ;doprnt.c: 827: if(flag & 0x1000)
"827
[e $ ! != & -> _flag `ui -> -> 4096 `i `ui -> -> 0 `i `ui 76  ]
[; ;doprnt.c: 829: prec = 6;
"829
[e = _prec -> 6 `i ]
[e :U 76 ]
[; ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"830
[e = _fval *U -> ( ___va_arg , (. -> *U -> _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 831: if(fval < 0.0) {
"831
[e $ ! < _fval .0.0 77  ]
{
[; ;doprnt.c: 832: fval = -fval;
"832
[e = _fval -U _fval ]
[; ;doprnt.c: 833: flag |= 0x03;
"833
[e =| _flag -> -> 3 `i `us ]
"834
}
[e :U 77 ]
[; ;doprnt.c: 834: }
[; ;doprnt.c: 835: exp = 0;
"835
[e = _exp -> 0 `i ]
[; ;doprnt.c: 836: if( fval!=0) {
"836
[e $ ! != _fval -> -> 0 `i `d 78  ]
{
[; ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) - 126);
"837
[e = *U &U _exp - -> -> & >> *U -> &U _fval `*ul -> 23 `i -> -> -> 255 `i `l `ul `uc `i -> 126 `i ]
[; ;doprnt.c: 838: exp--;
"838
[e -- _exp -> 1 `i ]
[; ;doprnt.c: 839: exp *= 3;
"839
[e =* _exp -> 3 `i ]
[; ;doprnt.c: 840: exp /= 10;
"840
[e =/ _exp -> -> 10 `uc `i ]
[; ;doprnt.c: 841: if(exp < 0)
"841
[e $ ! < _exp -> 0 `i 79  ]
[; ;doprnt.c: 842: exp--;
"842
[e -- _exp -> 1 `i ]
[e :U 79 ]
[; ;doprnt.c: 846: tmpval.integ = scale(-exp);
"846
[e = . _tmpval 1 ( _scale (1 -> -U _exp `c ]
[; ;doprnt.c: 847: tmpval.integ *= fval;
"847
[e =* . _tmpval 1 _fval ]
[; ;doprnt.c: 848: if(tmpval.integ < 1.0)
"848
[e $ ! < . _tmpval 1 .1.0 80  ]
[; ;doprnt.c: 849: exp--;
"849
[e -- _exp -> 1 `i ]
[e $U 81  ]
"850
[e :U 80 ]
[; ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
[e $ ! >= . _tmpval 1 .10.0 82  ]
[; ;doprnt.c: 851: exp++;
"851
[e ++ _exp -> 1 `i ]
[e :U 82 ]
"852
[e :U 81 ]
}
[e :U 78 ]
[; ;doprnt.c: 852: }
[; ;doprnt.c: 854: if(exp <= 0)
"854
[e $ ! <= _exp -> 0 `i 83  ]
[; ;doprnt.c: 855: c = 1;
"855
[e = _c -> -> 1 `i `c ]
[e $U 84  ]
"856
[e :U 83 ]
[; ;doprnt.c: 856: else
[; ;doprnt.c: 857: c = exp;
"857
[e = _c -> _exp `c ]
[e :U 84 ]
[; ;doprnt.c: 858: if(
[; ;doprnt.c: 860: flag & 0x100
[; ;doprnt.c: 868: ) {
"868
[e $ ! != & -> _flag `ui -> -> 256 `i `ui -> -> 0 `i `ui 85  ]
{
[; ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
"873
[e $ ! > -> _prec `ui - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui 86  ]
[; ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
"874
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `c ]
[e $U 87  ]
"875
[e :U 86 ]
[; ;doprnt.c: 875: else
[; ;doprnt.c: 876: c = prec;
"876
[e = _c -> _prec `c ]
[e :U 87 ]
[; ;doprnt.c: 877: if( fval!=0) {
"877
[e $ ! != _fval -> -> 0 `i `d 88  ]
{
[; ;doprnt.c: 878: fval /= scale(exp-c);
"878
[e =/ _fval ( _scale (1 -> - _exp -> _c `i `c ]
[; ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
"893
[e $ ! >= - _fval -> -> _fval `ul `d .0.5 89  ]
[; ;doprnt.c: 894: fval += 0.5;
"894
[e =+ _fval .0.5 ]
[e :U 89 ]
[; ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
"895
[e $ ! >= -> _fval `ul *U + &U _dpowers * -> -> + -> _c `i -> 1 `i `ui `ux -> -> # *U &U _dpowers `ui `ux 90  ]
{
[; ;doprnt.c: 896: fval *= 1e-1;
"896
[e =* _fval .1e-1 ]
[; ;doprnt.c: 897: exp++;
"897
[e ++ _exp -> 1 `i ]
"898
}
[; ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
[e $U 91  ]
[e :U 90 ]
[e $ ! < -> _fval `ul *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 92  ]
{
[; ;doprnt.c: 899: fval *= 10.0;
"899
[e =* _fval .10.0 ]
[; ;doprnt.c: 900: exp--;
"900
[e -- _exp -> 1 `i ]
"901
}
[e :U 92 ]
"903
[e :U 91 ]
}
[e :U 88 ]
[; ;doprnt.c: 901: }
[; ;doprnt.c: 903: }
[; ;doprnt.c: 929: width -= prec + 5;
"929
[e =- _width + _prec -> 5 `i ]
[; ;doprnt.c: 934: if(flag & 0x03)
"934
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 93  ]
[; ;doprnt.c: 935: width--;
"935
[e -- _width -> 1 `i ]
[e :U 93 ]
[; ;doprnt.c: 946: if(flag & 0x04) {
"946
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 94  ]
{
[; ;doprnt.c: 953: while(width > 0) {
"953
[e $U 95  ]
[e :U 96 ]
{
[; ;doprnt.c: 954: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"954
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 98  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 99  ]
[e :U 98 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 99 ]
[; ;doprnt.c: 955: width--;
"955
[e -- _width -> 1 `i ]
"956
}
[e :U 95 ]
"953
[e $ > _width -> 0 `i 96  ]
[e :U 97 ]
"957
}
[; ;doprnt.c: 956: }
[; ;doprnt.c: 957: } else
[e $U 100  ]
[e :U 94 ]
[; ;doprnt.c: 959: {
"959
{
[; ;doprnt.c: 964: while(width > 0) {
"964
[e $U 101  ]
[e :U 102 ]
{
[; ;doprnt.c: 965: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"965
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 104  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 105  ]
[e :U 104 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 105 ]
[; ;doprnt.c: 966: width--;
"966
[e -- _width -> 1 `i ]
"967
}
[e :U 101 ]
"964
[e $ > _width -> 0 `i 102  ]
[e :U 103 ]
[; ;doprnt.c: 967: }
[; ;doprnt.c: 973: if(flag & 0x03)
"973
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 106  ]
[; ;doprnt.c: 974: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"974
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 107  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 108  ]
[e :U 107 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 108 ]
[e :U 106 ]
"980
}
[e :U 100 ]
[; ;doprnt.c: 980: }
[; ;doprnt.c: 985: val = (unsigned long)fval;
"985
[e = _val -> _fval `ul ]
[; ;doprnt.c: 986: if(pb->func) (pb->func(val/dpowers[c] + '0')); else ((*pb->ptr++ = val/dpowers[c] + '0'));
"986
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 109  ]
[e ( *U . *U _pb 1 (1 -> + / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 48 `ui `ul `uc ]
[e $U 110  ]
[e :U 109 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> 48 `ui `ul `uc ]
[e :U 110 ]
[; ;doprnt.c: 987: val %= dpowers[c];
"987
[e =% _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 992: if(prec)
"992
[e $ ! != _prec -> 0 `i 111  ]
[; ;doprnt.c: 994: {
"994
{
[; ;doprnt.c: 995: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
"995
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 112  ]
[e ( *U . *U _pb 1 (1 -> -> 46 `ui `uc ]
[e $U 113  ]
[e :U 112 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 46 `ui `uc ]
[e :U 113 ]
[; ;doprnt.c: 996: prec -= c;
"996
[e =- _prec -> _c `i ]
[; ;doprnt.c: 997: while(c--) {
"997
[e $U 114  ]
[e :U 115 ]
{
[; ;doprnt.c: 1007: if(pb->func) (pb->func('0' + (val/dpowers[c]))); else ((*pb->ptr++ = '0' + (val/dpowers[c])));
"1007
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 117  ]
[e ( *U . *U _pb 1 (1 -> + -> -> 48 `ui `ul / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux `uc ]
[e $U 118  ]
[e :U 117 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> -> 48 `ui `ul / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux `uc ]
[e :U 118 ]
[; ;doprnt.c: 1008: val %= dpowers[c];
"1008
[e =% _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
"1010
}
[e :U 114 ]
"997
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 115  ]
[e :U 116 ]
[; ;doprnt.c: 1010: }
[; ;doprnt.c: 1011: while(prec) {
"1011
[e $U 119  ]
[e :U 120 ]
{
[; ;doprnt.c: 1012: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1012
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 122  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 123  ]
[e :U 122 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 123 ]
[; ;doprnt.c: 1013: prec--;
"1013
[e -- _prec -> 1 `i ]
"1014
}
[e :U 119 ]
"1011
[e $ != _prec -> 0 `i 120  ]
[e :U 121 ]
"1015
}
[e :U 111 ]
[; ;doprnt.c: 1014: }
[; ;doprnt.c: 1015: }
[; ;doprnt.c: 1021: if(pb->func) (pb->func('e')); else ((*pb->ptr++ = 'e'));
"1021
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 124  ]
[e ( *U . *U _pb 1 (1 -> -> 101 `ui `uc ]
[e $U 125  ]
[e :U 124 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 101 `ui `uc ]
[e :U 125 ]
[; ;doprnt.c: 1022: if(exp < 0) {
"1022
[e $ ! < _exp -> 0 `i 126  ]
{
[; ;doprnt.c: 1023: exp = -exp;
"1023
[e = _exp -U _exp ]
[; ;doprnt.c: 1024: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1024
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 127  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 128  ]
[e :U 127 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 128 ]
"1025
}
[; ;doprnt.c: 1025: } else
[e $U 129  ]
[e :U 126 ]
[; ;doprnt.c: 1026: if(pb->func) (pb->func('+')); else ((*pb->ptr++ = '+'));
"1026
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 130  ]
[e ( *U . *U _pb 1 (1 -> -> 43 `ui `uc ]
[e $U 131  ]
[e :U 130 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 43 `ui `uc ]
[e :U 131 ]
[e :U 129 ]
[; ;doprnt.c: 1039: if(pb->func) (pb->func(exp / 10 + '0')); else ((*pb->ptr++ = exp / 10 + '0'));
"1039
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 132  ]
[e ( *U . *U _pb 1 (1 -> + -> / _exp -> 10 `i `ui -> 48 `ui `uc ]
[e $U 133  ]
[e :U 132 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> / _exp -> 10 `i `ui -> 48 `ui `uc ]
[e :U 133 ]
[; ;doprnt.c: 1040: if(pb->func) (pb->func(exp % 10 + '0')); else ((*pb->ptr++ = exp % 10 + '0'));
"1040
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 134  ]
[e ( *U . *U _pb 1 (1 -> + -> % _exp -> 10 `i `ui -> 48 `ui `uc ]
[e $U 135  ]
[e :U 134 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> % _exp -> 10 `i `ui -> 48 `ui `uc ]
[e :U 135 ]
[; ;doprnt.c: 1047: continue;
"1047
[e $U 20  ]
"1048
}
[e :U 85 ]
[; ;doprnt.c: 1048: }
[; ;doprnt.c: 1112: if(prec <= 12)
"1112
[e $ ! <= _prec -> 12 `i 136  ]
[; ;doprnt.c: 1113: fval += fround(prec);
"1113
[e =+ _fval ( _fround (1 -> _prec `uc ]
[e :U 136 ]
[; ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
"1116
[e $ ! || > _exp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _exp -> 1 `i 137  ]
{
[; ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
"1120
[e $ ! < . _tmpval 1 .4.294967296 138  ]
{
[; ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1121
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1122
}
[; ;doprnt.c: 1122: }else{
[e $U 139  ]
[e :U 138 ]
{
[; ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1123
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1124
}
[e :U 139 ]
[; ;doprnt.c: 1124: }
[; ;doprnt.c: 1125: tmpval.integ = scale(exp);
"1125
[e = . _tmpval 1 ( _scale (1 -> _exp `c ]
[; ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
"1126
[e = _val ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> . _tmpval 1 `f ( __div_to_l_ (2 , _fval . _tmpval 1 ]
[; ;doprnt.c: 1129: fval = 0.0;
"1129
[e = _fval .0.0 ]
"1130
}
[; ;doprnt.c: 1130: } else {
[e $U 140  ]
[e :U 137 ]
{
[; ;doprnt.c: 1131: val = (unsigned long)fval;
"1131
[e = _val -> _fval `ul ]
[; ;doprnt.c: 1132: fval -= (double)val;
"1132
[e =- _fval -> _val `d ]
[; ;doprnt.c: 1133: exp = 0;
"1133
[e = _exp -> 0 `i ]
"1134
}
[e :U 140 ]
[; ;doprnt.c: 1134: }
[; ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1136
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 141  ]
[e $U 142  ]
"1137
[e :U 141 ]
[; ;doprnt.c: 1137: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 144  ]
[; ;doprnt.c: 1138: break;
"1138
[e $U 142  ]
[e :U 144 ]
"1136
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 141  ]
[e :U 142 ]
"1142
}
[; ;doprnt.c: 1142: width -= prec + c + exp;
[e =- _width + + _prec -> _c `i _exp ]
[; ;doprnt.c: 1143: if(
[; ;doprnt.c: 1147: prec)
"1147
[e $ ! != _prec -> 0 `i 145  ]
[; ;doprnt.c: 1148: width--;
"1148
[e -- _width -> 1 `i ]
[e :U 145 ]
[; ;doprnt.c: 1149: if(flag & 0x03)
"1149
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 146  ]
[; ;doprnt.c: 1150: width--;
"1150
[e -- _width -> 1 `i ]
[e :U 146 ]
[; ;doprnt.c: 1153: if(flag & 0x04) {
"1153
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 147  ]
{
[; ;doprnt.c: 1157: if(flag & 0x03)
"1157
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 148  ]
[; ;doprnt.c: 1159: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1159
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 149  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 150  ]
[e :U 149 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 150 ]
[e :U 148 ]
[; ;doprnt.c: 1168: while(width > 0) {
"1168
[e $U 151  ]
[e :U 152 ]
{
[; ;doprnt.c: 1169: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1169
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 154  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 155  ]
[e :U 154 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 155 ]
[; ;doprnt.c: 1170: width--;
"1170
[e -- _width -> 1 `i ]
"1171
}
[e :U 151 ]
"1168
[e $ > _width -> 0 `i 152  ]
[e :U 153 ]
"1173
}
[; ;doprnt.c: 1171: }
[; ;doprnt.c: 1173: } else
[e $U 156  ]
[e :U 147 ]
[; ;doprnt.c: 1175: {
"1175
{
[; ;doprnt.c: 1180: while(width > 0) {
"1180
[e $U 157  ]
[e :U 158 ]
{
[; ;doprnt.c: 1181: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1181
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 160  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 161  ]
[e :U 160 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 161 ]
[; ;doprnt.c: 1182: width--;
"1182
[e -- _width -> 1 `i ]
"1183
}
[e :U 157 ]
"1180
[e $ > _width -> 0 `i 158  ]
[e :U 159 ]
[; ;doprnt.c: 1183: }
[; ;doprnt.c: 1188: if(flag & 0x03)
"1188
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 162  ]
[; ;doprnt.c: 1190: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1190
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 163  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 164  ]
[e :U 163 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 164 ]
[e :U 162 ]
"1195
}
[e :U 156 ]
[; ;doprnt.c: 1195: }
[; ;doprnt.c: 1196: while(c--) {
"1196
[e $U 165  ]
[e :U 166 ]
{
[; ;doprnt.c: 1200: {
"1200
{
[; ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
"1201
[e = . _tmpval 0 / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1202: tmpval.vd %= 10;
"1202
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1203: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmpval.vd));
"1203
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 168  ]
[e ( *U . *U _pb 1 (1 -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[e $U 169  ]
[e :U 168 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[e :U 169 ]
"1204
}
"1206
}
[e :U 165 ]
"1196
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 166  ]
[e :U 167 ]
[; ;doprnt.c: 1204: }
[; ;doprnt.c: 1206: }
[; ;doprnt.c: 1207: while(exp > 0) {
"1207
[e $U 170  ]
[e :U 171 ]
{
[; ;doprnt.c: 1208: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1208
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 173  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 174  ]
[e :U 173 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 174 ]
[; ;doprnt.c: 1209: exp--;
"1209
[e -- _exp -> 1 `i ]
"1210
}
[e :U 170 ]
"1207
[e $ > _exp -> 0 `i 171  ]
[e :U 172 ]
[; ;doprnt.c: 1210: }
[; ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1211
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 175  ]
[; ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1212
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `c ]
[e $U 176  ]
"1213
[e :U 175 ]
[; ;doprnt.c: 1213: else
[; ;doprnt.c: 1214: c = prec;
"1214
[e = _c -> _prec `c ]
[e :U 176 ]
[; ;doprnt.c: 1215: prec -= c;
"1215
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1219: if(c)
"1219
[e $ ! != -> _c `i -> -> -> 0 `i `c `i 177  ]
[; ;doprnt.c: 1221: if(pb->func) (pb->func('.')); else ((*pb->ptr++ = '.'));
"1221
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 178  ]
[e ( *U . *U _pb 1 (1 -> -> 46 `ui `uc ]
[e $U 179  ]
[e :U 178 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 46 `ui `uc ]
[e :U 179 ]
[e :U 177 ]
[; ;doprnt.c: 1227: val = (long)(fval * scale(c));
"1227
[e = _val -> -> * _fval ( _scale (1 _c `l `ul ]
[; ;doprnt.c: 1228: while(c--) {
"1228
[e $U 180  ]
[e :U 181 ]
{
[; ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
"1229
[e = . _tmpval 0 / _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
[; ;doprnt.c: 1230: tmpval.vd %= 10;
"1230
[e =% . _tmpval 0 -> -> 10 `uc `ul ]
[; ;doprnt.c: 1231: if(pb->func) (pb->func('0' + tmpval.vd)); else ((*pb->ptr++ = '0' + tmpval.vd));
"1231
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 183  ]
[e ( *U . *U _pb 1 (1 -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[e $U 184  ]
[e :U 183 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> + -> -> 48 `ui `ul . _tmpval 0 `uc ]
[e :U 184 ]
[; ;doprnt.c: 1232: val %= dpowers[c];
"1232
[e =% _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
"1233
}
[e :U 180 ]
"1228
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 181  ]
[e :U 182 ]
[; ;doprnt.c: 1233: }
[; ;doprnt.c: 1235: while(prec) {
"1235
[e $U 185  ]
[e :U 186 ]
{
[; ;doprnt.c: 1236: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1236
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 188  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 189  ]
[e :U 188 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 189 ]
[; ;doprnt.c: 1237: prec--;
"1237
[e -- _prec -> 1 `i ]
"1238
}
[e :U 185 ]
"1235
[e $ != _prec -> 0 `i 186  ]
[e :U 187 ]
[; ;doprnt.c: 1238: }
[; ;doprnt.c: 1245: continue;
"1245
[e $U 20  ]
"1246
}
[e :U 75 ]
[; ;doprnt.c: 1246: }
[; ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
"1251
[e $ ! == & -> _flag `ui -> -> 192 `i `ui -> -> 0 `i `ui 190  ]
[; ;doprnt.c: 1253: {
"1253
{
[; ;doprnt.c: 1255: if(flag & 0x10)
"1255
[e $ ! != & -> _flag `ui -> -> 16 `i `ui -> -> 0 `i `ui 191  ]
[; ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
"1256
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**l `*v -> -> 0 `i `l `*l `ul ]
[e $U 192  ]
"1257
[e :U 191 ]
[; ;doprnt.c: 1257: else
[; ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
"1259
[e = _val -> -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `l `ul ]
[e :U 192 ]
[; ;doprnt.c: 1261: if((long)val < 0) {
"1261
[e $ ! < -> _val `l -> -> 0 `i `l 193  ]
{
[; ;doprnt.c: 1262: flag |= 0x03;
"1262
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1263: val = -val;
"1263
[e = _val -U _val ]
"1264
}
[e :U 193 ]
"1266
}
[; ;doprnt.c: 1264: }
[; ;doprnt.c: 1266: }
[e $U 194  ]
"1268
[e :U 190 ]
[; ;doprnt.c: 1268: else
[; ;doprnt.c: 1273: {
"1273
{
[; ;doprnt.c: 1281: if(flag & 0x10)
"1281
[e $ ! != & -> _flag `ui -> -> 16 `i `ui -> -> 0 `i `ui 195  ]
[; ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned long)0));
"1282
[e = _val *U -> ( ___va_arg , (. -> *U -> _ap `**ul `*v -> -> 0 `i `ul `*ul ]
[e $U 196  ]
"1283
[e :U 195 ]
[; ;doprnt.c: 1283: else
[; ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1286
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**ui `*v -> -> 0 `i `ui `*ui `ul ]
[e :U 196 ]
"1287
}
[e :U 194 ]
[; ;doprnt.c: 1287: }
[; ;doprnt.c: 1290: if(prec == 0 && val == 0)
"1290
[e $ ! && == _prec -> 0 `i == _val -> -> -> 0 `i `l `ul 197  ]
[; ;doprnt.c: 1291: prec++;
"1291
[e ++ _prec -> 1 `i ]
[e :U 197 ]
[; ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
"1294
[e $U 199  ]
{
[; ;doprnt.c: 1299: case 0x00:
"1299
[e :U 200 ]
"1302
[e :U 201 ]
[; ;doprnt.c: 1302: case 0xC0:
[; ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1305
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 202  ]
[e $U 203  ]
"1306
[e :U 202 ]
[; ;doprnt.c: 1306: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 205  ]
[; ;doprnt.c: 1307: break;
"1307
[e $U 203  ]
[e :U 205 ]
"1305
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 202  ]
[e :U 203 ]
"1309
}
[; ;doprnt.c: 1309: break;
[e $U 198  ]
[; ;doprnt.c: 1314: case 0x80:
"1314
[e :U 206 ]
[; ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1316
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 207  ]
[e $U 208  ]
"1317
[e :U 207 ]
[; ;doprnt.c: 1317: if(val < hexpowers[c])
[e $ ! < _val *U + &U _hexpowers * -> -> _c `uc `ux -> -> # *U &U _hexpowers `ui `ux 210  ]
[; ;doprnt.c: 1318: break;
"1318
[e $U 208  ]
[e :U 210 ]
"1316
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 207  ]
[e :U 208 ]
"1320
}
[; ;doprnt.c: 1320: break;
[e $U 198  ]
"1336
}
[; ;doprnt.c: 1336: }
[e $U 198  ]
"1294
[e :U 199 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 200
 , $ -> -> 192 `i `uc 201
 , $ -> -> 128 `i `uc 206
 198 ]
"1336
[e :U 198 ]
[; ;doprnt.c: 1339: if(c < prec)
"1339
[e $ ! < -> _c `i _prec 211  ]
[; ;doprnt.c: 1340: c = prec;
"1340
[e = _c -> _prec `c ]
[e $U 212  ]
"1341
[e :U 211 ]
[; ;doprnt.c: 1341: else if(prec < c)
[e $ ! < _prec -> _c `i 213  ]
[; ;doprnt.c: 1342: prec = c;
"1342
[e = _prec -> _c `i ]
[e :U 213 ]
"1345
[e :U 212 ]
[; ;doprnt.c: 1345: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 214  ]
[; ;doprnt.c: 1346: width--;
"1346
[e -- _width -> 1 `i ]
[e :U 214 ]
[; ;doprnt.c: 1348: if(flag & 0x4000) {
"1348
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 215  ]
{
[; ;doprnt.c: 1349: if(width > prec)
"1349
[e $ ! > _width _prec 216  ]
[; ;doprnt.c: 1350: width -= prec;
"1350
[e =- _width _prec ]
[e $U 217  ]
"1351
[e :U 216 ]
[; ;doprnt.c: 1351: else
[; ;doprnt.c: 1352: width = 0;
"1352
[e = _width -> 0 `i ]
[e :U 217 ]
"1353
}
[e :U 215 ]
[; ;doprnt.c: 1353: }
[; ;doprnt.c: 1381: if(width > c)
"1381
[e $ ! > _width -> _c `i 218  ]
[; ;doprnt.c: 1382: width -= c;
"1382
[e =- _width -> _c `i ]
[e $U 219  ]
"1383
[e :U 218 ]
[; ;doprnt.c: 1383: else
[; ;doprnt.c: 1384: width = 0;
"1384
[e = _width -> 0 `i ]
[e :U 219 ]
[; ;doprnt.c: 1387: if(flag & 0x04) {
"1387
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 220  ]
{
[; ;doprnt.c: 1392: if(flag & 0x03)
"1392
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 221  ]
[; ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1393
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 222  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 223  ]
[e :U 222 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 223 ]
[e :U 221 ]
[; ;doprnt.c: 1415: if(width)
"1415
[e $ ! != _width -> 0 `i 224  ]
[; ;doprnt.c: 1416: do
"1416
[e :U 227 ]
[; ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
"1417
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 228  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 229  ]
[e :U 228 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 229 ]
[; ;doprnt.c: 1418: while(--width);
"1418
[e $ != =- _width -> 1 `i -> 0 `i 227  ]
[e :U 226 ]
[e :U 224 ]
"1420
}
[; ;doprnt.c: 1420: } else
[e $U 230  ]
[e :U 220 ]
[; ;doprnt.c: 1422: {
"1422
{
[; ;doprnt.c: 1424: if(width
[; ;doprnt.c: 1428: )
"1428
[e $ ! != _width -> 0 `i 231  ]
[; ;doprnt.c: 1429: do
"1429
[e :U 234 ]
[; ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
"1430
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 235  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 236  ]
[e :U 235 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 236 ]
[; ;doprnt.c: 1431: while(--width);
"1431
[e $ != =- _width -> 1 `i -> 0 `i 234  ]
[e :U 233 ]
[e :U 231 ]
[; ;doprnt.c: 1438: if(flag & 0x03)
"1438
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 237  ]
[; ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
"1439
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 238  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 239  ]
[e :U 238 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 239 ]
[e :U 237 ]
"1469
}
[e :U 230 ]
[; ;doprnt.c: 1469: }
[; ;doprnt.c: 1474: while(prec--) {
"1474
[e $U 240  ]
[e :U 241 ]
{
[; ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
"1476
[e $U 244  ]
[; ;doprnt.c: 1478: {
"1478
{
[; ;doprnt.c: 1483: case 0x00:
"1483
[e :U 245 ]
"1486
[e :U 246 ]
[; ;doprnt.c: 1486: case 0xC0:
[; ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
"1489
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `c ]
[; ;doprnt.c: 1491: break;
"1491
[e $U 243  ]
[; ;doprnt.c: 1497: case 0x80:
"1497
[e :U 247 ]
[; ;doprnt.c: 1499: {
"1499
{
"1500
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
[e = _idx -> & / _val *U + &U _hexpowers * -> -> _prec `ui `ux -> -> # *U &U _hexpowers `ui `ux -> -> -> 15 `i `l `ul `uc ]
[; ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
"1504
[e = _c -> *U + :s 2C * -> _idx `ux -> -> # *U :s 2C `ui `ux `c ]
"1508
}
[; ;doprnt.c: 1508: }
[; ;doprnt.c: 1510: break;
"1510
[e $U 243  ]
"1523
}
[; ;doprnt.c: 1523: }
[e $U 243  ]
"1476
[e :U 244 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 245
 , $ -> -> 192 `i `uc 246
 , $ -> -> 128 `i `uc 247
 243 ]
"1523
[e :U 243 ]
[; ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
"1524
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 248  ]
[e ( *U . *U _pb 1 (1 -> _c `uc ]
[e $U 249  ]
[e :U 248 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> _c `uc ]
[e :U 249 ]
"1525
}
[e :U 240 ]
"1474
[e $ != -- _prec -> 1 `i -> 0 `i 241  ]
[e :U 242 ]
"1533
}
[e :U 20 ]
"536
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 21  ]
[e :U 22 ]
[; ;doprnt.c: 1525: }
[; ;doprnt.c: 1533: }
[; ;doprnt.c: 1535: alldone:
"1535
[e :U 45 ]
[; ;doprnt.c: 1540: return 0;
"1540
[e ) -> 0 `i ]
[e $UE 19  ]
[; ;doprnt.c: 1541: }
"1541
[e :UE 19 ]
}
[a 2C 48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 0 ]
[a 1C 40 110 117 108 108 41 0 ]
